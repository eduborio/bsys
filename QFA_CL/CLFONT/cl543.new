/////////////////////////////////////////////////////////////////////////////
// SISTEMA....: SISTEMA DE FATURAMENTO COMERCIO
// OBJETIVO...: LISTAGEM DE PRODUTOS FATURADOS
// ANALISTA...: EDUARDO AUGUSTO BORIO
// PROGRAMADOR: EDUARDO AUGUSTO BORIO
// INICIO.....: janeiro DE 2006
// OBS........:
// ALTERACOES.:

#define K_MAX_LIN 57

// DECLARACAO E INICIALIZACAO DE VARIAVEIS __________________________________

local   bESCAPE := {||(XNIVEL==1 .and. !XFLAG) .or. empty(dINI) }

private cTITULO                   // titulo do relatorio
private dINI
private dFIM
private nLIM := 0
private aEDICAO := {}             // vetor para os campos de entrada de dados

if ! quse(XDRV_CL,"PROD_TMP",{"TMPCDPRD"},"E")
   qmensa("N„o foi poss¡vel abrir arquivo temporario !! Tente novamente.")
   return
endif


// CRIACAO DO VETOR DE BLOCOS _______________________________________________

aadd(aEDICAO,{{ || qgetx(-1,0,@dINI)            } , "INI"    })
aadd(aEDICAO,{{ || qgetx(-1,0,@dFIM)            } , "FIM"    })
aadd(aEDICAO,{{ || qgetx(-1,0,@nLIM,"999")      } , "SETOR"  })

do while .T.

   qlbloc(5,0,"B543A","QBLOC.GLO")
   XNIVEL := 1
   XFLAG  := .T.
   dINI := dFIM := ctod("")

   // SEGUNDO LOOP PARA ENTRADA DOS DADOS ___________________________________

   do while XNIVEL >= 1 .and. XNIVEL <= len(aEDICAO)
      eval ( aEDICAO [XNIVEL,1] )
      if eval ( bESCAPE ) ; dbcloseall() ; return ; endif
      if ! i_critica( aEDICAO[XNIVEL,2] ) ; loop ; endif
      iif ( XFLAG , XNIVEL++ , XNIVEL-- )
   enddo

   if ( i_inicializacao() , i_impressao() , NIL )

   qmensa("")

enddo

/////////////////////////////////////////////////////////////////////////////
// CRITICA ADICIONAL NA DESCIDA _____________________________________________

static function i_critica ( cCAMPO )

   do case
      case cCAMPO == "FIM"
           if dFIM < dINI
             return .F.
           endif

   endcase

return .T.

/////////////////////////////////////////////////////////////////////////////
// FUNCAO PARA FAZER A INICIALIZACAO DO RELATORIO ___________________________

static function i_inicializacao

   // CRIA TITULO DO RELATORIO ______________________________________________


   cTITULO := "LISTAGEM DE ESTOQUE (M.o.S)" +" de " + dtoc(dINI) + " a " + dtoc(dFIM)

   qmensa("")

   // ESTABELECE RELACOES ENTRE ARQUIVOS ____________________________________

   FAT->(dbsetorder(1)) // Codigo
   FAT->(dbgotop())
   //set softseek on
   //FAT->(Dbseek(dINI))
   //set softseek off
   ITEN_FAT->(dbsetfilter({||ITEN_FAT->Data >= dINI .and. ITEN_FAT->Data <= dFIM}))
   ITEN_FAT->(dbsetorder(5))
   ITEN_FAT->(dbGotop())

   PEND->(dbsetorder(2)) // data de emissao
   PEND->(dbgotop())
   set softseek on
   PEND->(Dbseek(dINI))
   set softseek off
   ITEM_PEN->(dbsetorder(2))

   PEDIDO->(dbsetorder(1)) // data de emissao
   PEDIDO->(dbgotop())
   set softseek on
   PEDIDO->(Dbseek(dINI))
   set softseek off
   LANC->(dbsetorder(1))





return .T.


static function i_impressao

   if ! qinitprn() ; return ; endif

//   if XLOCALIMP == "X"
//      i_impre_xls()
//   else
      i_impre_prn()
//   endif



return

/////////////////////////////////////////////////////////////////////////////
// FUNCAO PARA INICIALIZAR O PROCESSO DE IMPRESSAO __________________________

static function i_impre_prn
    local nTOTAL     := 0
    local nVALOR     := 0
    local nDESC      := 0
    local nMEDIA     := 0
    local nDIAS      := 0
    local nMESES     := 0
    local nESQMIN    := 0
    local nPEDIR     := 0
    local nMESES_POS := 0
    local nDOS       := 0 //Days of Suplies
    local nTOTDOS       := 0 //Days of Suplies
    local dDATA_ENT  := ctod("")
    local dDATA_INI  := ctod("")
    local dDATA_FIM  := ctod("")
    local nTOT_GER   := 0
    local nSALDO     := 0
    local nCONT      := 0
    local nQUANT     := 0
    local nTOT_QUANT := 0
    local cPROD      := 0
    local aFAT       := {}
    local aPED       := {}
    local aPEND       := {}
    local aPROD      := {}
    local asFAT      := {}
    local asPROD     := {}
    local asPED     := {}
    local asPEND     := {}

    local nPERC      := 0
    local lTEM := .T.
    local zPROD := space(50)
    local cGRUPO := space(4)
    local cDESCGRUPO := space(30)
   // INICIALIZA PROCESSO DE IMPRESSAO ______________________________________
    lTEM := .F.
   //if ! qinitprn() ; return ; endif
   PROD_TMP->(__dbzap())

   ITEN_FAT->(dbsetfilter({||ITEN_FAT->Data >= dINI .and. ITEN_FAT->Data <= dFIM}))
   ITEN_FAT->(dbsetorder(5))
   ITEN_FAT->(dbGotop())
   cPROD := ITEN_FAT->Cod_prod

   do while ! ITEN_FAT->(eof())  //.and. FAT->Dt_emissao >= dINI .and. FAT->Dt_emissao <= dFIM  // condicao principal de loop

      FAT->(dbseek(ITEN_FAT->Num_fat))
      if FAT->Cancelado
         ITEN_FAT->(dbskip())
         loop
      endif

      if empty(FAT->Num_fatura).and. FAT->Es == "S"
         ITEN_FAT->(dbskip())
         loop
      endif


//      if ! left(FAT->Cod_cfop,3) $ "510-511-512-610-611-612-591-691-120-220"
//         FAT->(dbskip())
//         loop
//      endif
//      qgirabarra()

        if FAT->Es == "S"  // Se for Saida soma as quantidade senao diminui
           nQUANT += ITEN_FAT->Quantidade
           nTOT_QUANT += ITEN_FAT->Quantidade
           nTOTAL += (ITEN_FAT->Quantidade * ITEN_FAT->Vl_unitar)    //Quantidade * valor unitario
           nTOT_GER += (ITEN_FAT->Quantidade * ITEN_FAT->Vl_unitar)
        else
           nQUANT -= ITEN_FAT->Quantidade
           nTOT_QUANT -= ITEN_FAT->Quantidade
           nTOTAL -= (ITEN_FAT->Quantidade * ITEN_FAT->Vl_unitar)    //Quantidade * valor unitario
           nTOT_GER -= (ITEN_FAT->Quantidade * ITEN_FAT->Vl_unitar)
        endif


        ITEN_FAT->(dbskip())

        if ITEN_FAT->Cod_prod != cPROD

           PROD->(dbseek(cPROD))
           PROD_TMP->(qappend())
           replace PROD_TMP->Cod_prod    with cPROD
           replace PROD_TMP->Quantidade  with nQUANT
           replace PROD_TMP->Preco       with PROD->Preco_cons
           PROD_TMP->(DbCommit())

           cPROD := ITEN_FAT->Cod_prod

           nQUANT := 0
           nTOTAL := 0
        endif

        qmensa("Aguarde... Processando ...")

   enddo

   PROD->(dbseek(cPROD))
   PROD_TMP->(qappend())
   replace PROD_TMP->Cod_prod    with cPROD
   replace PROD_TMP->Quantidade  with nQUANT
   replace PROD_TMP->Preco       with PROD->Preco_cons
   PROD->(dbCommit())


   nQUANT := 0
   nTOTAL := 0
   nPERC  := 0


   //classifica a matriz por descricao do produto
   asFAT := asort(aFAT,,,{|x,y| x[1] < y[1] })
   aFAT := {}
   if lTEM
       cPROD := asFAT[1,1]
       zPROD := asFAT[1,4]+" "+asFAT[1,5]

       nCONT := 1
       do while  nCONT <= len(asFAT)

         if asFAT[nCONT,7] == "S"  // Se for Saida soma as quantidade senao diminui
            nQUANT += asFAT[nCONT,2]
            nTOT_QUANT += asFAT[nCONT,2]
            nTOTAL += asFAT[nCONT,6]    //Quantidade * valor unitario
            nTOT_GER += asFAT[nCONT,6]  //Quantidade * valor unitario

         else
            nQUANT -= asFAT[nCONT,2]
            nTOT_QUANT -= asFAT[nCONT,2]
            nTOTAL -= asFAT[nCONT,6]    //Quantidade * valor unitario
            nTOT_GER -= asFAT[nCONT,6]  //Quantidade * valor unitario
         endif

         nCONT++
         if nCONT > len(asFAT)
            nCONT := len(asFAT)
            exit
         endif

         if asFAT[nCONT,1] != cPROD

            PROD->(dbseek(cPROD))
            PROD_TMP->(qappend())
            replace PROD_TMP->Cod_prod    with cPROD
            replace PROD_TMP->Quantidade  with nQUANT
            replace PROD_TMP->Preco       with PROD->Preco_cons
            PROD_TMP->(DbCommit())

            cPROD := asFAT[nCONT,1]
            zPROD := asFAT[nCONT,4]+" "+asFAT[nCONT,5]

            nQUANT := 0
            nTOTAL := 0
         endif
       enddo

      PROD->(dbseek(cPROD))
      PROD_TMP->(qappend())
      replace PROD_TMP->Cod_prod    with cPROD
      replace PROD_TMP->Quantidade  with nQUANT
      replace PROD_TMP->Preco       with PROD->Preco_cons
      PROD->(dbCommit())


      nQUANT := 0
      nTOTAL := 0
      nPERC  := 0
   endif

   lTEM := .F.
   asFAT := {}
   ////////////////////////////////////////////////////////////////////////////
   //PROCESSA PEDIDOS PENDENDES________________________________________________

   do while ! PEDIDO->(eof()) .and. PEDIDO->Data_ped >= dINI .and. PEDIDO->Data_ped <= dFIM  // condicao principal de loop

      if PEDIDO->Interface
         PEDIDO->(dbskip())
         loop
      endif

      qmensa("Aguarde... Processando ...")

      LANC->(Dbgotop())
      LANC->(Dbseek(PEDIDO->Codigo))
      do while LANC->Cod_ped == PEDIDO->Codigo .and. ! LANC->(eof())
          PROD->(dbsetorder(4))
          PROD->(dbseek(LANC->Cod_Prod))
          nVALOR := nVALOR + ( (LANC->Preco * LANC->Quant) + ( (LANC->Preco * LANC->Quant)*(PROD->Ipi/100) ) )

          aadd(aPED,{right(PROD->Codigo,5),LANC->Quant,LANC->Preco,"","",nVALOR})
          nPERC += nVALOR
          LANC->(Dbskip())
          nVALOR := 0
          lTEM := .T.
      enddo
      PEDIDO->(dbskip())
      nVALOR := 0
      nDESC := 0
   enddo

   //classifica a matriz por descricao do produto
   asPED := asort(aPED,,,{|x,y| x[1] < y[1] })
   aPED := {}

   if lTEM
      cPROD := asPED[1,1]
      zPROD := asPED[1,4]+" "+asPED[1,5]

      nCONT := 1
      do while  nCONT <= len(asPED)

         nQUANT += asPED[nCONT,2]

         nCONT++
         if nCONT > len(asPED)
            nCONT := len(asPED)
            exit
         endif

         if asPED[nCONT,1] != cPROD

            PROD->(dbseek(cPROD))
            if PROD_TMP->(dbseek(cPROD))
               replace PROD_TMP->Pedidos     with nQUANT
            else
               PROD_TMP->(qappend())
               replace PROD_TMP->Cod_prod    with cPROD
               replace PROD_TMP->Quantidade  with nQUANT
               replace PROD_TMP->Preco       with PROD->Preco_cons
               replace PROD_TMP->Pedidos     with nQUANT
            endif
            PROD_TMP->(Dbcommit())

            cPROD := asPED[nCONT,1]
            zPROD := asPED[nCONT,4]+" "+asPED[nCONT,5]

            nQUANT := 0
            nTOTAL := 0
         endif
      enddo
      PROD->(dbseek(cPROD))
      if PROD_TMP->(dbseek(cPROD))
         replace PROD_TMP->Pedidos     with nQUANT
      else
         PROD_TMP->(qappend())
         replace PROD_TMP->Cod_prod    with cPROD
         replace PROD_TMP->Quantidade  with nQUANT
         replace PROD_TMP->Preco       with PROD->Preco_cons
         replace PROD_TMP->Pedidos     with nQUANT
      endif
      PROD_TMP->(DbCommit())


      nQUANT := 0
      nTOTAL := 0
      nPERC  := 0
   endif

   lTEM := .F.
   asPED := {}

   ///////////////////////////////////////////////////////////////////////////
   //PROCESSA PENDENCIAS______________________________________________________


   do while ! PEND->(eof())  .and. PEND->Dt_emissao >= dINI .and. PEND->Dt_emissao <= dFIM  // condicao principal de loop

      qmensa("Aguarde... Processando ...")


         ITEM_PEN->(Dbgotop())
         ITEM_PEN->(Dbseek(PEND->Codigo))
         do while ITEM_PEN->Cod_pend == PEND->Codigo .and. ! ITEM_PEN->(eof())
             PROD->(dbsetorder(4))
             PROD->(dbseek(ITEM_PEN->Cod_Prod))
             nVALOR := nVALOR + ( (ITEM_PEN->Vl_unitar * ITEM_PEN->Quantidade) + ( (ITEM_PEN->Vl_unitar * ITEM_PEN->Quantidade)*(PROD->Ipi/100) ) )

             aadd(aPEND,{right(PROD->Codigo,5),ITEM_PEN->Quantidade,ITEM_PEN->Vl_unitar,"","",nVALOR})
             nPERC += nVALOR
             ITEM_PEN->(Dbskip())
             nVALOR := 0
             lTEM := .T.
         enddo
         PEND->(dbskip())
         nVALOR := 0
         nDESC := 0
   enddo

   //classifica a matriz por descricao do produto
   asPEND := asort(aPEND,,,{|x,y| x[1] < y[1] })
   aPEND := {}
   if lTEM
       cPROD := asPEND[1,1]
       zPROD := asPEND[1,4]+" "+asPEND[1,5]

       nCONT := 1
       do while  nCONT <= len(asPEND)

          nQUANT += asPEND[nCONT,2]

          nCONT++
          if nCONT > len(asPEND)
             nCONT := len(asPEND)
             exit
          endif

          if asPEND[nCONT,1] != cPROD
             PROD->(dbseek(cPROD))
             if PROD_TMP->(dbseek(cPROD))
                replace PROD_TMP->Pendencias  with nQUANT
             else
                PROD_TMP->(qappend())
                replace PROD_TMP->Cod_prod    with cPROD
                replace PROD_TMP->Quantidade  with nQUANT
                replace PROD_TMP->Preco       with PROD->Preco_cons
                replace PROD_TMP->Pendencias  with nQUANT
             endif
             PROD_TMP->(DbCommit())

             cPROD := asPEND[nCONT,1]
             zPROD := asPEND[nCONT,4]+" "+asPEND[nCONT,5]

             nQUANT := 0
             nTOTAL := 0
          endif
       enddo
       PROD->(Dbseek(cPROD))
       if PROD_TMP->(dbseek(cPROD))
          replace PROD_TMP->Pendencias  with nQUANT
       else
          PROD_TMP->(qappend())
          replace PROD_TMP->Cod_prod    with cPROD
          replace PROD_TMP->Quantidade  with nQUANT
          replace PROD_TMP->Preco       with PROD->Preco_cons
          replace PROD_TMP->Pendencias  with nQUANT
       endif
       PROD_TMP->(DbCommit())


      nQUANT := 0
      nTOTAL := 0
      nPERC  := 0
   endif

   lTEM := .F.
   asPEND := {}

   //qstopprn()
   nDOS := 0
   nTOTDOS := 0
   nMESES := 0
   nMESES_POS := 0

   PROD->(Dbgotop())
   do While ! PROD->(eof())

      if right(PROD->Codigo,5) == "     "
         PROD->(Dbskip())
         loop
      endif

      dDATA_INI :=  dINI
      dDATA_FIM :=  dFIM


      INVENT->(dbsetorder(4))
      if INVENT->(Dbseek(right(PROD->Codigo,5)))
         nSALDO := INVENT->Quant_atu

         if INVENT->Data > dDATA_INI
            dDATA_INI := INVENT->Data
         endif
      else
         nSALDO := 0
         dDATA_ENT := ctod("")
         //qmensa("Produto sem Saldo!!")
      endif

      nMESES := busca_media(dDATA_INI,dDATA_FIM)



      if PROD_TMP->(dbseek(right(PROD->Codigo,5)))
         nMEDIA  := PROD_TMP->Quantidade / nMESES
         nDOS    := INVENT->Quant_atu / nMEDIA
         nTOTDOS := (INVENT->Quant_atu + PROD_TMP->Pedidos + PROD_TMP->Pendencias) / nMEDIA
         nESTMIN := nMEDIA*4
         nPEDIR  := (nESTMIN + PROD_TMP->Pendencias) - (INVENT->Quant_atu + PROD_TMP->Pedidos)
         if nPEDIR < 0
            nPEDIR := 0
         endif

         aadd(aPROD,{right(PROD->Codigo,5),left(PROD->Descricao,30),PROD->Cod_fabr,PROD->Cod_ass,PROD->Marca,PROD->Preco_cons,PROD_TMP->Quantidade,left(PROD->Codigo,4),INVENT->Quant_atu,INVENT->Data,nMESES,nMEDIA,nDOS,PROD_TMP->Pedidos,PROD_TMP->Pendencias,nTOTDOS,nESTMIN,nPEDIR})
      else
         aadd(aPROD,{right(PROD->Codigo,5),left(PROD->Descricao,30),PROD->Cod_fabr,PROD->Cod_ass,PROD->Marca,PROD->Preco_cons,0,left(PROD->Codigo,4),INVENT->Quant_atu,INVENT->Data,nMESES,nMEDIA,nDOS,0,0,nTOTDOS,0,0})
      endif

      nDIAS  := 0
      nMESES := 0
      nMEDIA := 0
      nDOS   := 0
      nTOTDOS   := 0
      nESTMIN := 0
      nPEDIR := 0
      PROD->(dbskip())
   enddo


   asPROD := asort(aPROD,,,{|x,y| x[8] + x[1] < y[8] + y[1] })

   nCONT := 1
   cGRUPO := asPROD[1,8]
   cDESCGRUPO := asPROD[1,5]
   do while  nCONT <= len(asPROD)

      if ! qlineprn() ; exit ; endif
      if XLOCALIMP == "X"
         if XPAGINA == 0 //.or. prow() > K_MAX_LIN
            qpageprn()
            @ prow()+1,0 say chr(9)+cTITULO
            @ prow()+1,0 say "Grupo"+chr(9)+"Descricao" +chr(9)+ "Cod.Fab" +chr(9)+ "Cod.Ass."+chr(9)+"Preco Venda"+chr(9)+"Saidas"+chr(9)+"Saldo em Estoque"+chr(9)+"Data de Entrada"+chr(9)+"Meses"+chr(9)+"Media Mensal"+chr(9)+"Estoque em Meses"+chr(9)+"Em Transito"+chr(9)+"Pendencias"+chr(9)+"M.o.S Total"+chr(9)+"Estoque Minimo"+chr(9)+"Pedido"+chr(9)+"Marca/Cole‡ao"
            @ prow()+1,0 say ""
         endif
      else
        if XPAGINA == 0 .or. prow() > K_MAX_LIN
            @prow()+1,0 say XCOND0
            qpageprn()
            qcabecprn(cTITULO,80)
            @ prow()+1,0 say XCOND1 + "Codigo    Descricao                          Cod.Fab   Cod.Ass.  Marca                        Preco Venda          Saidas"
            @ prow()+1,0 say replicate("-",134)
         endif
      endif


      if XLOCALIMP == "X"
         @ prow()+1,00      say " "+asPROD[nCONT,8] +chr(9) //Codigo
         @ prow()  ,pcol()  say left(asPROD[nCONT,2],30)+chr(9)  //Descricao
         @ prow()  ,pcol()  say " "+left(asPROD[nCONT,3],8)+chr(9)  //Cod_fabr
         @ prow()  ,pcol()  say " "+asPROD[nCONT,4]+chr(9)  //Cod_ass
         //@ prow()  ,pcol()  say asPROD[nCONT,5]+chr(9)  //Marca
         @ prow()  ,pcol()  say transf(asPROD[nCONT,6],"@E 999,999.99")+chr(9)  //Preco de Venda
         @ prow()  ,pcol()  say transf(asPROD[nCONT,7],"@R 999999")+chr(9)  //Quantidade
         @ prow()  ,pcol()  say transf(asPROD[nCONT,9],"@R 999999")+chr(9)  //Saldo atual
         @ prow()  ,pcol()  say " "+dtoc(asPROD[nCONT,10])+chr(9)  //Meses
         @ prow()  ,pcol()  say transf(asPROD[nCONT,11],"@R 999999")+chr(9)  //Data da 1a Entrada
         @ prow()  ,pcol()  say transf(asPROD[nCONT,12],"@E 99999.9")+chr(9)  //Media
         @ prow()  ,pcol()  say transf(asPROD[nCONT,13],"@E 99999.9")+chr(9)  //D.O.S
         @ prow()  ,pcol()  say transf(asPROD[nCONT,14],"@E 99999.9")+chr(9)  //Pedidos
         @ prow()  ,pcol()  say transf(asPROD[nCONT,15],"@E 99999.9")+Chr(9)  //Pendencias
         @ prow()  ,pcol()  say transf(asPROD[nCONT,16],"@E 99999.9")+Chr(9)  //Pendencia + Pedido + Saldo em Estoque / Media de Venda
         @ prow()  ,pcol()  say transf(asPROD[nCONT,17],"@E 99999.9")+chr(9)  //Media de Venda * 4 Estoque Minimo
         @ prow()  ,pcol()  say transf(asPROD[nCONT,18],"@E 99999.9")  //(Estoque MInimo + Pendencia) - (Pedido + Saldo em Estoque)
      else
         @ prow()+1,00  say asPROD[nCONT,1]  //Codigo
         @ prow()  ,10  say left(asPROD[nCONT,2],30)  //Descricao
         @ prow()  ,45  say left(asPROD[nCONT,3],8)  //Cod_fabr
         @ prow()  ,55  say asPROD[nCONT,4]  //Cod_ass
         @ prow()  ,65  say asPROD[nCONT,5]  //Marca
         @ prow()  ,95  say transf(asPROD[nCONT,6],"@E 999,999.99")  //Preco de Venda
         @ prow()  ,115 say transf(asPROD[nCONT,7],"@R 999999")  //Quantidade
         @ prow()  ,125 say transf(asPROD[nCONT,9],"@R 999999")  //Quantidade
      endif

      nCONT++

      if nCONT > len(asPROD)
         nCONT := len(asPROD)
         exit
      endif

      if XLOCALIMP == "X"
         if asPROD[nCONT,8] != cGRUPO
            @ prow()  ,pcol()  say chr(9)+cDESCGRUPO
            cGRUPO     := asPROD[nCONT,8]
            cDESCGRUPO := asPROD[nCONT,5]
         endif
      endif

   enddo
   qstopprn()
return

static function busca_media(dINICIAL,dFINAL)
local nMESES  := 0
local intCONT   := 0
local cANOMES := 0
local nANOMES_INI := 0
local nANOMES_FIM := 0

cANOMES := strzero(year(dINICIAL),4)+strzero(month(dINICIAL),2)
nANOMES_INI := val(cANOMES)

cANOMES := strzero(year(dFINAL),4)+strzero(month(dFINAL),2)
nANOMES_FIM := val(cANOMES)

For intCONT :=  nANOMES_INI To nANOMES_FIM

    if right(strzero(nANOMES_INI,6),2) == "12"
       intCONT += 89
       nMESES++
    endif

    nMESES++
    nANOMES_INI++



next

return nMESES


